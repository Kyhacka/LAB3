namespace Test3;

public static class InputHelper
{
    public static double ReadPositiveDouble(string prompt)
    {
        double value;
        do
        {
            Console.Write(prompt);
        }
        while (!double.TryParse(Console.ReadLine(), out value) || value <= 0);

        return value;
    }
}


public class RightTriangle
{
    public double CathetusA { get; }
    public double CathetusB { get; }

    public RightTriangle(double a, double b)
    {
        if (a <= 0 || b <= 0)
            throw new ArgumentException("Катеты должны быть положительными!");

        CathetusA = a;
        CathetusB = b;
    }

    public static bool operator true(RightTriangle triangle) =>
        triangle.CathetusA > 0 && triangle.CathetusB > 0;

    public static bool operator false(RightTriangle triangle) =>
        triangle.CathetusA <= 0 || triangle.CathetusB <= 0;

    public static implicit operator double(RightTriangle triangle) =>
        triangle.CathetusA * triangle.CathetusB / 2;

    public override string ToString() =>
        $"Прямоугольный треугольник с катетами {CathetusA} и {CathetusB}";
}

public class Program
{
    static void Main()
    {
        try
        {
            Console.WriteLine("Введите параметры прямоугольного треугольника:");
            double a = InputHelper.ReadPositiveDouble("Длина первого катета: ");
            double b = InputHelper.ReadPositiveDouble("Длина второго катета: ");

            RightTriangle triangle = new(a, b);

            Console.WriteLine($"\n{triangle}");
            Console.WriteLine($"Площадь треугольника: {(double)triangle}");

            if (triangle)
                Console.WriteLine("Треугольник валиден");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Ошибка: {ex.Message}");
        }

        Console.WriteLine("\nНажмите любую клавишу для выхода...");
        Console.ReadKey();
    }
}
